import rclpy from rclpy.node import Node from px4_msgs.msg import ObstacleDistance import time

class ObstacleDistancePublisher(Node): def __init__(self): super().__init__('obstacle_distance_publisher') self.publisher_ = self.create_publisher(ObstacleDistance, 
        '/fmu/in/obstacle_distance', 10) self.timer = self.create_timer(1.0, self.publish_obstacle_distance_data) self.system_start_time = time.time()

    def publish_obstacle_distance_data(self): msg = ObstacleDistance()

        msg.timestamp = int((time.time() - self.system_start_time) * 1e6)
        msg.frame = ObstacleDistance.MAV_FRAME_BODY_FRD
        msg.sensor_type = ObstacleDistance.MAV_DISTANCE_SENSOR_LASER

        # Simulate only the left side detecting an obstacle at 600 mm (60 cm)
        left_data = 60
        distances = [65535] * 72
        distances[18:24] = [left_data] * 6

        msg.distances = distances
        msg.increment = 5.0
        msg.angle_offset = 0.0
        msg.min_distance = 20
        msg.max_distance = 400

        self.publisher_.publish(msg)
        self.get_logger().info(f"Published obstacle data: Left obstacle at {left_data * 10} mm")

def main(args=None):
    rclpy.init(args=args)
    node = ObstacleDistancePublisher()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
